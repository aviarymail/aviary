input CreateProjectInput {
  name: String!
  teamId: ID!
}

scalar DateTime

type Mutation {
  createProject(input: CreateProjectInput!): Project!
  logout: SuccessResponse!
  requestLoginCode(email: String!): SuccessResponse!
  signup(input: SignupInput!): SuccessResponse!
  verifyLoginCode(code: String!, email: String!): User!
}

input PaginationInput {
  cursor: String
  page: Int
  skip: Int
  take: Int
}

type Project {
  createdAt: DateTime!
  id: ID!
  name: String!
  team: Team!
  teamId: ID!
  updatedAt: DateTime!
}

type Query {
  me: User
  project(id: ID!): Project
  team(id: ID!): Team
}

type Session {
  createdAt: DateTime!
  id: ID!
  token: String!
  userAgent: String
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
}

type SuccessResponse {
  success: Boolean!
}

type Team {
  createdAt: DateTime!
  id: ID!
  invites: [TeamInvite!]!
  memberships: [TeamMembership!]!
  name: String!
  projects: [Project!]!
  updatedAt: DateTime!
}

type TeamInvite {
  createdAt: DateTime!
  email: String!
  id: ID!
  invitedBy: User!
  invitedById: ID!
  team: Team!
  teamId: ID!
}

type TeamMembership {
  createdAt: DateTime!
  id: ID!
  role: TeamRoles!
  team: Team!
  teamId: ID!
  updatedAt: DateTime!
  user: User!
  userId: ID!
}

enum TeamRoles {
  ADMIN
  BILLING
  MEMBER
}

type User {
  confirmedAt: DateTime
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: UserRoles!
  sessions: [Session!]!
  teamInvites: [TeamInvite!]!
  teamMemberships: [TeamMembership!]!
  updatedAt: DateTime!
}

enum UserRoles {
  MADE
  SUPPORT
  USER
}
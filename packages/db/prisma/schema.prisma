// ======================
// Config
// ======================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
}

// ======================
// Enums
// ======================

enum UserRoles {
  Made
  Support
  User
}

enum TeamRoles {
  Admin
  Member
  Billing
}

enum VariableTypes {
  String
  Number
  Boolean
  Enum
  Object
}

enum TplLanguages {
  Handlebars
}

enum MessageStatuses {
  Active
  Inactive
  Warning
  Error
}

// ======================
// Models
// ======================

model User {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  confirmedAt       DateTime?
  role              UserRoles          @default(User)
  email             String             @unique
  firstName         String
  lastName          String
  //
  emailConfirmation EmailConfirmation?
  teamMemberships   TeamMembership[]
  teamInvites       TeamInvite[]
  sessions          Session[]
}

model EmailConfirmation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  token     String
  //
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@index(token)
  @@index(userId)
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  token        String   @unique
  refreshToken String   @unique
  userAgent    String?
  //
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@index(token)
  @@index(refreshToken)
  @@index(userId)
}

model Team {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  //
  memberships TeamMembership[]
  projects    Project[]
  invites     TeamInvite[]
}

model TeamMembership {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      TeamRoles @default(Member)
  //
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@index(userId)
  @@index(teamId)
}

model TeamInvite {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  email       String
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  //
  invitedById String
  invitedBy   User     @relation(fields: [invitedById], references: [id])

  @@unique([email, teamId])
  @@index(email)
  @@index(teamId)
  @@index(invitedById)
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  //
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])

  @@index(teamId)
}

model ProjectSettings {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  companyName     String
  logoWidth       String
  //
  logoId          String
  logo            Upload   @relation(fields: [logoId], references: [id])
  blocksetId      String
  blockset        Blockset @relation(fields: [blocksetId], references: [id])
  defaultLayoutId String
  defaultLayout   Block    @relation(fields: [defaultLayoutId], references: [id])
}

model Upload {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bucket          String
  url             String
  //
  projectSettings ProjectSettings[] @ignore
}

model Blockset {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  //
  projectSettings ProjectSettings[] @ignore
}

model Block {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  projectSettings ProjectSettings[] @ignore
}

// ======================
// Config
// ======================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
}

// ======================
// Enums
// ======================

enum UserRoles {
  MADE
  SUPPORT
  USER
}

enum TeamRoles {
  ADMIN
  MEMBER
  BILLING
}

enum VariableTypes {
  STRING
  NUMBER
  BOOLEAN
  ENUM
  OBJECT
}

enum TemplateLanguages {
  HANDLEBARS
}

enum MessageStatuses {
  ACTIVE
  INACTIVE
  WARNING
  ERROR
}

// ======================
// Models
// ======================

model User {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  confirmedAt       DateTime?
  role              UserRoles          @default(USER)
  email             String             @unique
  firstName         String
  lastName          String
  //
  emailConfirmation EmailConfirmation?
  teamMemberships   TeamMembership[]
  teamInvites       TeamInvite[]
  sessions          Session[]
}

model EmailConfirmation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  token     String
  //
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@index(token)
  @@index(userId)
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  token        String   @unique
  refreshToken String   @unique
  userAgent    String?
  //
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@index(token)
  @@index(refreshToken)
  @@index(userId)
}

model Team {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  //
  memberships TeamMembership[]
  projects    Project[]
  invites     TeamInvite[]
}

model TeamMembership {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      TeamRoles @default(MEMBER)
  //
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@index(userId)
  @@index(teamId)
}

model TeamInvite {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  email       String
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  //
  invitedById String
  invitedBy   User     @relation(fields: [invitedById], references: [id])

  @@unique([email, teamId])
  @@index(email)
  @@index(teamId)
  @@index(invitedById)
}

model Project {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  //
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])
  messages  Message[]

  @@index(teamId)
}

model BlockSet {
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
  name      String
  //
  blocks    Block[]
  messages  Message[]
}

model Block {
  id            String          @id @default(cuid())
  updatedAt     DateTime        @updatedAt
  name          String
  description   String?
  order         Int             @default(0)
  layout        Boolean
  markup        String
  css           String?
  precomp       String
  schema        Json
  //
  blocksetId    String
  blockset      BlockSet        @relation(fields: [blocksetId], references: [id])
  categoryId    String
  category      BlockCategory   @relation(fields: [categoryId], references: [id])
  props         BlockProp[]
  messageBlocks TemplateBlock[] @ignore

  @@index(blocksetId)
  @@index(categoryId)
}

model BlockCategory {
  id     String  @id @default(cuid())
  name   String
  //
  blocks Block[]
}

model BlockProp {
  id           String        @id @default(cuid())
  order        Int           @default(0)
  name         String
  key          String
  description  String?
  type         VariableTypes
  defaultValue Json?
  enumMembers  Json?
  array        Boolean       @default(false)
  //
  blockId      String
  block        Block         @relation(fields: [blockId], references: [id])
  parentId     String?
  parent       BlockProp?    @relation("BlockPropToBlockProp", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     BlockProp[]   @relation("BlockPropToBlockProp")

  @@unique([blockId, key])
  @@index(blockId)
  @@index(parentId)
}

model Message {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  prefab      Boolean
  name        String
  slug        String
  description String
  markup      String?
  css         String?
  schema      String?
  status      MessageStatuses @default(ACTIVE)
  sent        Int             @default(0)
  category    String
  //
  blocksetId  String
  blockset    BlockSet        @relation(fields: [blocksetId], references: [id])
  projectId   String?
  project     Project?        @relation(fields: [projectId], references: [id])
  blocks      TemplateBlock[]
  params      TemplateParam[]

  @@unique([projectId, name])
  @@unique([projectId, slug])
  @@index(blocksetId)
  @@index(projectId)
}

model TemplateParam {
  id           String          @id @default(cuid())
  order        Int             @default(0)
  key          String
  type         VariableTypes
  defaultValue Json?
  enumMembers  Json?
  array        Boolean         @default(false)
  //
  templateId   String
  template     Message         @relation(fields: [templateId], references: [id])
  parentId     String?
  parent       TemplateParam?  @relation("TemplateParamToTemplateParam", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     TemplateParam[] @relation("TemplateParamToTemplateParam")

  @@unique([templateId, key])
  @@index(templateId)
  @@index(parentId)
}

model TemplateBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  props     Json
  layout    Boolean
  //
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  blockId   String
  block     Block    @relation(fields: [blockId], references: [id])

  @@index(messageId)
  @@index(blockId)
}
